group_by(Congruency,AgeGroup)
# 3 year olds
cong_3years=ErrorData_E1_CondbyAge$meanSubError[ErrorData_E1_CondbyAge$Congruency==1 & ErrorData_E1_CondbyAge$AgeGroup==1]
incong_3years=ErrorData_E1_CondbyAge$meanSubError[ErrorData_E1_CondbyAge$Congruency==2 & ErrorData_E1_CondbyAge$AgeGroup==1]
# 4 year olds
cong_4years=ErrorData_E1_CondbyAge$meanSubError[ErrorData_E1_CondbyAge$Congruency==1 & ErrorData_E1_CondbyAge$AgeGroup==2]
incong_4years=ErrorData_E1_CondbyAge$meanSubError[ErrorData_E1_CondbyAge$Congruency==2 & ErrorData_E1_CondbyAge$AgeGroup==2]
error_3YearOlds=t.test(incong_3years,cong_3years,alternative = "greater", paired=TRUE, var.equal = TRUE)
error_4YearOlds=t.test(incong_4years,cong_4years,alternative = "greater", paired=TRUE, var.equal = TRUE)
demoUnique_RT <- includedSubs_RT %>%
group_by(Subject) %>%
select(-c(Congruency, countTrials))  %>%
distinct(Subject,AgeGroup)
RTData_E1 <- read.csv(e1_fileName) %>%
mutate(Subject =factor(id)) %>%
select(-(id)) %>%
inner_join(demoUnique_RT) %>%
left_join(demographics) %>%
filter(RT<4000, correct == 1, trial>10) %>%
mutate(logRT = log(RT)) %>%
mutate(Item = factor(imagePair), Congruency = factor(condition), AgeGroup = factor(AgeGroup))
RTbyCond_All <- RTData_E1 %>%
group_by(Congruency) %>%
summarize(meanRT = mean(RT), stdRT=sd(RT))
# run age x congruency anova
aov.rt = ezANOVA(data = RTData_E1, dv=.(RT), wid=.(Subject), within=.(Congruency), between=.(AgeGroup), type=3)
print(aov.rt)
# Linear mixed effect models -- confirm with LME4 on logRT
RT_lmer_E1_full = lmer(logRT ~ Congruency*AgeGroup + (1+ Congruency | Subject) + (1 + Congruency|Item), data=RTData_E1)
# Output table
kable(summary(RT_lmer_E1_full)$coef)
lmerFullOut=data.frame(round(summary(RT_lmer_E1_full)$coef,3))
## Average by subject first
RTbyCond_3 <- RTData_E1 %>%
filter(AgeGroup==1) %>%
group_by(Subject, Congruency) %>%
summarize (meanSubRT = mean(RT))
RTbyCond_4 <- RTData_E1 %>%
filter(AgeGroup==2) %>%
group_by(Subject, Congruency) %>%
summarize (meanSubRT = mean(RT))
## Then by condition for descriptives
RTbyCond_4_Avg <- RTbyCond_4 %>%
group_by(Congruency) %>% ## already grouped by subject here
summarize (meanRT = mean(meanSubRT), sdRT = sd(meanSubRT))
RTbyCond_3_Avg <- RTbyCond_3 %>%
group_by(Congruency) %>% ## already grouped by subject here
summarize (meanRT = mean(meanSubRT), sdRT = sd(meanSubRT))
## Post-hoc t-tests
# 3-year-olds
stroopRT_3Years=t.test(RTbyCond_3$meanSubRT[RTbyCond_3$Congruency==2], RTbyCond_3$meanSubRT[RTbyCond_3$Congruency==1], alternative = "greater", paired=TRUE, var.equal = TRUE)
# 4-year-olds
stroopRT_4Years=t.test(RTbyCond_4$meanSubRT[RTbyCond_4$Congruency==2], RTbyCond_4$meanSubRT[RTbyCond_4$Congruency==1], alternative = "greater", paired=TRUE, var.equal = TRUE)
stroopRT_4Years_cohensD <- RTbyCond_4 %>%
group_by(Subject) %>%
summarize(effectBySub = meanSubRT[Congruency==2] - meanSubRT[Congruency==1] ) %>%
summarize(meanDiff = mean(effectBySub), stdDiff=sd(effectBySub)) %>%
mutate(cohensD = meanDiff/stdDiff)
stroopRT_3Years_cohensD <- RTbyCond_3 %>%
group_by(Subject) %>%
summarize(effectBySub = meanSubRT[Congruency==2] - meanSubRT[Congruency==1] ) %>%
summarize(meanDiff = mean(effectBySub), stdDiff=sd(effectBySub)) %>%
mutate(cohensD = meanDiff/stdDiff)
### Mixed effect models on RT for 4-year-olds
RTbyCond_4_Raw <- RTData_E1 %>%
filter(AgeGroup==2)
RT_lmer_E1_4YearOlds = lmer(logRT ~ Congruency + (1 + Congruency| Subject) + (1 + Congruency|Item), data=RTbyCond_4_Raw)
kable(summary(RT_lmer_E1_4YearOlds)$coef)
lmerOut=summary(RT_lmer_E1_4YearOlds)$coef
lmer4YrsOut=data.frame(round(summary(RT_lmer_E1_4YearOlds)$coef,3))
StroopbySub <- RTData_E1 %>%
group_by(Subject, Congruency) %>%
summarize (meanRT = mean(RT)) %>%
mutate(StroopRT = meanRT[Congruency==2] - meanRT[Congruency==1]) %>%
select(-c(Congruency,meanRT)) %>%
distinct(StroopRT)%>%
mutate( AbsStroopRT = abs(StroopRT))
StroopErrorbySub <- ErrorData_E1 %>%
group_by(Subject, Congruency) %>%
summarize (meanError = mean(error)) %>%
left_join(demographics) %>%
mutate(StroopError = meanError[Congruency==2] - meanError[Congruency==1]) %>%
select(-c(Congruency,meanError))
overallRT <- RTData_E1 %>%
group_by(Subject) %>%
summarize (meanRT = mean(RT), sdRT = sd(RT), age=Age[1])
# Age vs. Stroop
AgevStroop=cor.test(overallRT$age, StroopbySub$StroopRT)
AgevStroopError=cor.test(StroopErrorbySub$Age, StroopErrorbySub$StroopError)
# Mean RT vs. Stroop
RTvStroop=cor.test(overallRT$meanRT, StroopbySub$StroopRT)
# Mean RT vs. abs(Stroopeffect)
RTvAbsStroop=cor.test(overallRT$meanRT, StroopbySub$AbsStroopRT)
# More variance in standard deviation by age?
t.test(overallRT$sdRT[overallRT$age<48],overallRT$sdRT[overallRT$age>=48])
toPlot <- StroopbySub %>%
left_join(overallRT)
# make plots to visualize these
g1=ggplot(toPlot, aes(x = meanRT, y = StroopRT, col=age)) +
geom_point()  +
geom_smooth(method="lm", color="navy") +
theme_few() +
scale_color_viridis() +
theme(legend.position = "none") +
labs(x = "Average RT (ms)", y ="Stroop RT (ms)")
g2=ggplot(toPlot, aes(x = meanRT, y = AbsStroopRT, col=age)) +
geom_point()  +
geom_smooth(method="lm", color="navy") +
theme_few() +
scale_color_viridis(name ="Age (months)") +
labs(x = "Average RT (ms)", y ="Absolute value of Stroop RT (ms)")
SuppFigure2=ggarrange(g1,g2, nrow=1)
ggsave("SuppFigure1-E2", width = 11.5, height = 5,unit =  "in", plot = SuppFigure2, path="./figures/", device = "tiff",dpi = 300)
demographics_e2 <- read.csv("demographics/Experiment2.csv")
# for all subjects, count # of trials after practice
errorSubs <- read.csv(e2_fileName) %>%
mutate(Subject = factor(id), Congruency = factor(condition))  %>%
filter(trial>10)  %>%
group_by(Subject) %>%
summarize(countTrials = length(RT)) %>%
summarize(avgTrials = mean(countTrials), minTrials=min(countTrials), maxTrials=max(countTrials))
# for all subjects, count # of slow trials
slowPercent <- read.csv(e2_fileName) %>%
mutate(Subject = factor(id))  %>%
filter(trial>10, correct ==1 )  %>%
group_by(Subject) %>%
summarize(countTrials = length(RT), slowTrials = sum(RT>4000)) %>%
group_by(Subject) %>%
summarize(percentSlowTrials = slowTrials / countTrials)
wrongPercent <- read.csv(e2_fileName) %>%
mutate(Subject = factor(id))  %>%
filter(trial>10)  %>%
group_by(Subject) %>%
summarize(countTrials = length(correct), numErrors = sum(correct==0)) %>%
group_by(Subject) %>%
summarize(percentErrors= numErrors / countTrials)
## Wrangle for t-test
ErrorsbyCond <- read.csv(e2_fileName) %>%
mutate(Subject =factor(id)) %>%
select(-(id)) %>%
mutate(Item = factor(imagePair), Congruency = factor(condition)) %>%
filter(trial>10) %>% # exclude practice trials
group_by(Congruency,Subject) %>%
summarize(subErrors = 1-mean(correct)) %>%
group_by(Congruency)
ErrorsbyCond_Summary <-ErrorsbyCond %>%
group_by(Congruency) %>%
summarize(meanErrors = mean(subErrors)*100, sdErrors = sd(subErrors)*100)
###### simple t-test
ErrorByCondTest=t.test(ErrorsbyCond$subErrors[ErrorsbyCond$Congruency==2], ErrorsbyCond$subErrors[ErrorsbyCond$Congruency==1], alternative = "greater", paired=TRUE, var.equal = TRUE)
allData_E2_errors_raw <- read.csv(e2_fileName) %>%
mutate(Subject =factor(id)) %>%
select(-(id)) %>%
filter(trial > 10) %>% # exclude practice trials
mutate(Item = factor(imagePair), Congruency = factor(condition)) %>%
mutate(error = 1-(correct))
## Exploratory analyses -- confirm with mixed effect glmer
# Convergence error, eliminate random slopes on subs
# Errors_glmer_E2 = glmer(error ~ Congruency + (Congruency | Subject) + (Congruency|Item), data=allData_E2_errors_raw, family="binomial")
Errors_glmer_E2 = glmer(error ~ Congruency + (1 | Subject) + (Congruency|Item), data=allData_E2_errors_raw, family="binomial")
Errors_glmer_E2_out=data.frame(round(summary(Errors_glmer_E2)$coef,3))
kable(Errors_glmer_E2_out)
allData_E2<-read.csv(e2_fileName) %>%
mutate(Subject =factor(id), Congruency = factor(condition), Item = factor(imagePair))  %>%
select(-(id))
## Load in data and see how many correct fast RT trials we have
checkTrials_RT <- allData_E2 %>%
filter(RT<4000, correct == 1, trial>10)  %>% # speeded, correct trials after practice
group_by(Subject, Congruency)  %>%
summarize(countTrials = length(RT))  # how many trails per condition
## Load in data and see how overall trials were have
checkTrials_All <- allData_E2 %>%
filter(trial>10)  %>% #trials after practice
group_by(Subject, Congruency)  %>%
summarize(countTrials = length(RT))  # how many trails per condition
# nothing to exclude  on the basis of trials
sum(checkTrials_RT$countTrials<5)
## compute avg RT and z scores
allKids <-allData_E2 %>%
group_by(Subject)  %>%
summarize(avgRT = mean (RT)) %>%
mutate(avgRT_zScore = scale(avgRT, center = TRUE, scale = TRUE))
## filter out
fastKids <-allKids %>%
filter(avgRT_zScore < 2)
## list of fast kids subject ids
fastKidsList <- fastKids %>%
group_by(Subject) %>%
select(-c(avgRT, avgRT_zScore))  %>%
distinct(Subject)
## exclude from full data set
fastKids_RT <- allData_E2 %>%
inner_join(fastKidsList) %>%
filter(RT<4000, correct == 1, trial>10) %>%  # speeded, correct trials after practice
mutate(logRT = log(RT))
## count number of trials we got
fastKidsTrials <-fastKids_RT  %>%
group_by(Subject) %>%
summarize(countTrials =length(RT))  %>%
summarize(meanTrials = mean(countTrials))
### also keep these kids in and see what happens in exploratory analyses
allKids_RT <- allData_E2 %>%
filter(RT<4000, correct == 1, trial>10) %>%  # speeded, correct trials after practice
mutate(logRT = log(RT))
## Average by congruency
RTbyCond <- fastKids_RT %>%
group_by(Congruency,Subject) %>%
summarize(meanRTSub = mean(RT))
RTbyCond_E2<-RTbyCond ## for use in E3
RTbyCond_Summary <- RTbyCond %>%
group_by(Congruency) %>%
summarize(meanRT = mean(meanRTSub))
###### simple t-test
RTByCond_Test=t.test(RTbyCond$meanRTSub[RTbyCond$Congruency==2], RTbyCond$meanRTSub[RTbyCond$Congruency==1], alternative = "greater", paired=TRUE, var.equal = TRUE)
# cohen's d
effectBySub=RTbyCond$meanRTSub[RTbyCond$Congruency==2]-RTbyCond$meanRTSub[RTbyCond$Congruency==1];
meanDiff=mean(effectBySub)
stdDiff=sd(effectBySub)
cohensd=meanDiff/stdDiff
# lmer model
RT_lmer_E2_Fast = lmer(logRT ~ Congruency + (1+ Congruency|Subject) + (1 + Congruency|Item), data=fastKids_RT)
round(summary(RT_lmer_E2_Fast)$coef,2)
RT_lmer_E2_Fast_Out = data.frame(round(summary(RT_lmer_E2_Fast)$coef,2))
###### simple t-test
allKids_RTbyCond <- allKids_RT %>%
group_by(Congruency,Subject) %>%
summarize(mean = mean(RT))
# t-test
allKids_RTbyCond_Test=t.test(allKids_RTbyCond$mean[allKids_RTbyCond$Congruency==2], allKids_RTbyCond$mean[allKids_RTbyCond$Congruency==1], alternative = "greater", paired=TRUE, var.equal = TRUE)
# Convergence errors with random slopes on items; omitted.
RT_lmer_E2_All = lmer(logRT ~ Congruency + (1+ Congruency|Subject) + (1|Item), data=allKids_RT)
kable(round(summary(RT_lmer_E2_All)$coef,2))
RT_lmer_E2_All_Out = data.frame(round(summary(RT_lmer_E2_All)$coef,2))
##Make some plots
RTbyCond_3_Plot <- RTData_E1 %>%
filter(AgeGroup==1) %>%
group_by (Congruency, Subject) %>%
summarize(meanRT = mean(RT)) %>%
group_by (Congruency) %>%
multi_boot_standard(col = "meanRT")
RTbyCond_4_Plot <- RTData_E1 %>%
filter(AgeGroup==2) %>%
group_by (Congruency, Subject) %>%
summarize(meanRT = mean(RT)) %>%
group_by (Congruency) %>%
multi_boot_standard(col = "meanRT")
RTbyCond_E2_Plot <- fastKids_RT %>%
group_by (Congruency, Subject) %>%
summarize(meanRT = mean(RT)) %>%
group_by (Congruency) %>%
multi_boot_standard(col = "meanRT")
#######
ErrbyCond_3_Plot <- ErrorData_E1 %>%
filter(AgeGroup==1) %>%
group_by (Congruency, Subject) %>%
summarize(meanError = mean(error)) %>%
mutate(meanError = meanError*100)  %>%
group_by (Congruency) %>%
multi_boot_standard(col = "meanError")
ErrbyCond_4_Plot <- ErrorData_E1 %>%
filter(AgeGroup==2) %>%
group_by (Congruency, Subject) %>%
summarize(meanError = mean(error)) %>%
mutate(meanError = meanError*100)  %>%
group_by (Congruency) %>%
multi_boot_standard(col = "meanError")
ErrbyCond_E2_Plot <- allData_E2_errors_raw %>%
group_by (Congruency, Subject) %>%
summarize(meanError = mean(error)) %>%
mutate(meanError = meanError*100)  %>%
group_by (Congruency) %>%
multi_boot_standard(col = "meanError")
###
g1=ggplot(RTbyCond_3_Plot, aes(x = Congruency, y = mean, fill=Congruency)) +
theme_few() +
geom_bar(stat = "identity", position= "dodge", alpha=.7) +
scale_fill_manual(values=c("#3C86A0", "#821919")) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), color=c("#3C86A0", "#821919")) +
labs(y = "Average RT (ms)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
scale_y_continuous(limits=c(1350,2100), oob = rescale_none)
g2=ggplot(RTbyCond_4_Plot, aes(x = Congruency, y = mean, fill=Congruency)) +
theme_few() +
geom_bar(stat = "identity", position= "dodge", alpha=.7) +
scale_fill_manual(values=c("#3C86A0", "#821919")) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), color=c("#3C86A0", "#821919")) +
labs(y = "Average RT (ms)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
scale_y_continuous(limits=c(1350,2100), oob = rescale_none)
g3=ggplot(RTbyCond_E2_Plot, aes(x = Congruency, y = mean, fill=Congruency)) +
theme_few() +
geom_bar(stat = "identity", position= "dodge", alpha=.7) +
scale_fill_manual(values=c("#3C86A0", "#821919")) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), color=c("#3C86A0", "#821919")) +
labs(y = "Average RT (ms)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
scale_y_continuous(limits=c(1350,2100), oob = rescale_none)
###
g4=ggplot(ErrbyCond_3_Plot, aes(x = Congruency, y = mean, fill=Congruency)) +
theme_few() +
geom_bar(stat = "identity", position= "dodge", alpha=.7) +
scale_fill_manual(values=c("#3C86A0", "#821919")) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), color=c("#3C86A0", "#821919")) +
labs(y = "Mean error (%)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
ylim(c(0, 25)) +
ggtitle("E1: 3-Year-Olds")
g5=ggplot(ErrbyCond_4_Plot, aes(x = Congruency, y = mean, fill=Congruency)) +
theme_few() +
geom_bar(stat = "identity", position= "dodge", alpha=.7) +
scale_fill_manual(values=c("#3C86A0", "#821919")) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), color=c("#3C86A0", "#821919")) +
labs(y = "Mean error (%)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
ylim(c(0, 25)) +
ggtitle("E1: 4-Year-Olds")
g6=ggplot(ErrbyCond_E2_Plot, aes(x = Congruency, y = mean, fill=Congruency)) +
theme_few() +
geom_bar(stat = "identity", position= "dodge", alpha=.7) +
scale_fill_manual(values=c("#3C86A0", "#821919")) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), color=c("#3C86A0", "#821919")) +
labs(y = "Mean error (%)", x ="") +
theme(legend.position="none") +
scale_x_discrete(labels=c("Congruent","Incongruent")) +
ylim(c(0, 25)) +
ggtitle("E2: Replication")
compiledPlot=ggarrange(g4,g5,g6,g1,g2,g3, nrow=2) # errors first, then RT
#compiledPlot=ggarrange(g1,g2,g3,g4,g5,g6, nrow=2)
ggsave("Figure3-E1andE2", width = 10, height = 6,unit =  "in", plot = compiledPlot, path="./figures/", device = "tiff",dpi = 300)
# get Stroop item effects for all 4-year-olds
stroopItemEffects<-RTbyCond_4_Raw %>%
full_join(fastKids_RT) %>%
group_by(Item, Congruency) %>%
summarize(meanRT = mean(RT)) %>%
group_by(Item) %>%
summarize(stroopRT = meanRT[Congruency==2] - meanRT[Congruency==1])
## import adult data
adultStroopItemEffects=read.csv("data/AdultItemEffects.csv") %>%
mutate(Item = as.factor(Item))
## merge adult and children's data
stroopItemEffects <- stroopItemEffects %>%
mutate(childStroopRT = stroopRT) %>%
full_join(adultStroopItemEffects)
# correlate item effects
adultKidCorr=cor.test(stroopItemEffects$childStroopRT,stroopItemEffects$AdultStroopRT)
# make plot
ggplot(stroopItemEffects, aes(x = AdultStroopRT, y = childStroopRT)) +
theme_few() +
geom_point()  +
geom_smooth(method="lm", color="navy") +
#draws x and y axis line
# theme(axis.line = element_line(color = 'black')) +
labs(x="Adults' Stroop Display Effects (ms)", y="4-year-olds' Stroop Display Effects (ms)")+
xlim(c(-25, 75))
ggsave("Figure4-AdultKidCorr", width = 4, height = 4,unit =  "in", plot = last_plot(), path="./figures/", device = "tiff",dpi = 300)
## import fam data
famRatings=read.csv("data/FamiliarityRatings_4YearOlds_CSV.csv")
famRatingsSummary <- famRatings %>%
mutate(Subject = as.factor(Subject)) %>%
group_by(Subject) %>%
summarize(meanBasic = mean(CorrectBasic)*100, meanSize = mean(CorrectSize)*100, meanIncorrect = mean(RespondedButIncorrect)*100)
##
noResponses = mean(100 - (famRatingsSummary$meanBasic+famRatingsSummary$meanIncorrect))
famRatingsByItem <- famRatings %>%
mutate(ImPairNumber = as.factor(ImPairNumber)) %>%
group_by(ImageFileName, ImPairNumber) %>%
summarize(meanBasic = mean(CorrectBasic)*100, meanSize = mean(CorrectSize)*100, meanIncorrect = mean(RespondedButIncorrect)*100)
### Visualize basic-level ID by item
ggplot(famRatingsByItem, aes(x = ImageFileName, y = meanBasic,col=ImPairNumber)) +
geom_point()  +
theme_few() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(famRatingsByItem, aes(x = ImageFileName, y = meanSize, col=ImPairNumber)) +
geom_point()  +
theme_few() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
##
bbq <- famRatingsByItem %>%
filter(ImageFileName == "07_grill.png")
die <- famRatingsByItem %>%
filter(ImageFileName == "07_dice.png")
desk <- famRatingsByItem %>%
filter(ImageFileName == "01_desk.png")
apple <- famRatingsByItem %>%
filter(ImageFileName == "01_apple.png")
## Get imPairs (Stroop Displays) where basic-level ID is above 75%
highBasic <- famRatings %>%
group_by(ImageFileName,ImPairNumber) %>%
summarize(meanBasic = mean(CorrectBasic)) %>%
mutate(highBasic = meanBasic > .75) %>%
group_by(ImPairNumber) %>%
summarize(countHighBasic = sum(highBasic))
## Output basic-level identification on these sets of "well" vs "poorly" identified displays
highBasicDisplays=highBasic$ImPairNumber[highBasic$countHighBasic==2] ## 2 -- both items should be "true", i.e., greater than 75% threshold
famRatingsHighBasic <- famRatingsByItem %>%
filter(is.element(ImPairNumber,highBasicDisplays))
##
lowBasicDisplays=highBasic$ImPairNumber[highBasic$countHighBasic<2]
famRatingsLowBasic <- famRatingsByItem %>%
filter(is.element(ImPairNumber,lowBasicDisplays))
## pairs where both items were poorly identified
BothPoorlyIdentified=highBasic$ImPairNumber[highBasic$countHighBasic==0]
famRatingsBySub_Misidentifications<- famRatings %>%
filter(RespondedButIncorrect==1) %>%
group_by(Subject) %>%
summarize(meanSize = mean(CorrectSize)*100)
misIDvChance=t.test(famRatingsBySub_Misidentifications$meanSize, mu=.5)
highSize <- famRatings %>%
group_by(ImageFileName,ImPairNumber) %>%
summarize(meanSize = mean(CorrectSize))
# get median of size identification
medianSize = median(highSize$meanSize)
#
highSize <- highSize %>%
mutate(highSize = meanSize >= medianSize) %>%
group_by(ImPairNumber) %>%
summarize(countHighSize= sum(highSize))
## Output size identification on these sets of "well" vs "poorly" size identified displays
highSizeDisplays=highSize$ImPairNumber[highSize$countHighSize==2] ## 2 -- both items should be "true", i.e., greater than 75% threshold
famRatingsHighSize <- famRatingsByItem %>%
filter(is.element(ImPairNumber,highSizeDisplays))
##
lowSizeDisplays=highSize$ImPairNumber[highSize$countHighSize<2]
famRatingsLowSize <- famRatingsByItem %>%
filter(is.element(ImPairNumber,lowSizeDisplays))
stroopItemEffectsHighID <- stroopItemEffects %>%
mutate(ImPairNumber = as.factor(Item)) %>%
filter(is.element(ImPairNumber, highBasicDisplays))
stroopItemEffectsLowID <- stroopItemEffects %>%
mutate(ImPairNumber = as.factor(Item)) %>%
filter(is.element(ImPairNumber, lowBasicDisplays))
### output
mean(stroopItemEffectsHighID$childStroopRT)
mean(stroopItemEffectsLowID$childStroopRT)
highvLowBasic=t.test(stroopItemEffectsHighID$childStroopRT,stroopItemEffectsLowID$childStroopRT, var.equal = TRUE)
## imPair 7 - grill/desk
unique(famRatings$ImageFileName[famRatings$ImPairNumber==7])
bbqDie=stroopItemEffects$childStroopRT[stroopItemEffects$Item==7]
# imPair 1 - apple/desk
unique(famRatings$ImageFileName[famRatings$ImPairNumber==1])
appleDesk=stroopItemEffects$childStroopRT[stroopItemEffects$Item==1]
stroopItemEffectsHighSize <- stroopItemEffects %>%
mutate(ImPairNumber = as.factor(Item)) %>%
filter(is.element(ImPairNumber, highSizeDisplays))
stroopItemEffectsLowSize <- stroopItemEffects %>%
mutate(ImPairNumber = as.factor(Item)) %>%
filter(is.element(ImPairNumber, lowSizeDisplays))
### output
mean(stroopItemEffectsHighSize$childStroopRT)
mean(stroopItemEffectsLowSize$childStroopRT)
highvLowSize=t.test(stroopItemEffectsLowSize$childStroopRT,stroopItemEffectsHighSize$childStroopRT, var.equal = TRUE)
## plot it!
stroopByID <- famRatingsByItem %>%
group_by(ImPairNumber) %>%
mutate(meanBasicPair = mean(meanBasic), meanSizePair = mean(meanSize) ) %>%
mutate(Item = as.factor(ImPairNumber)) %>%
mutate(highBasicID=is.element(Item, highBasicDisplays)) %>%
left_join(stroopItemEffects)
plot1=ggplot(stroopByID, aes(x = AdultStroopRT, y = childStroopRT, col=meanBasicPair)) +
geom_point() +
scale_color_viridis(option="D",name="\nBasic-level ID(%)") +
theme_few() +
theme(text = element_text(size=18)) +
geom_smooth(method="lm", color="grey", alpha=.2) +
theme(legend.position = "left") +
# labs(x="Adults' Stroop \n Display Effects (ms)", y="4-year-olds' Stroop \n Display Effects (ms)")+
labs(x="", y="")+
xlim(c(-25, 75))  +
theme(aspect.ratio=1) + theme(axis.title = element_text(size = 15),
legend.text = element_text(size = 8),
legend.title = element_text(size = 10),
legend.key = element_rect(fill = NA),
legend.background = element_rect(fill = NA),
legend.position = c(0.15, 0.85))
plot2=ggplot(stroopByID, aes(x = AdultStroopRT, y = childStroopRT, col=highBasicID)) +
geom_point() +
theme_few() +
scale_color_manual(values=c("#39568CFF", "#B8DE29FF")) +
theme(text = element_text(size=18)) +
geom_smooth(method="lm", color="grey", alpha=.2) +
theme(legend.position = "none",aspect.ratio=1) +
labs(x="", y="")+
# labs(x="Adults' Stroop \n Display Effects (ms)", y="4-year-olds' Stroop \n Display Effects (ms)")+
xlim(c(-25, 75))
itemByID <- RTbyCond_4_Raw %>%
full_join(fastKids_RT) %>%
group_by(imagePair, Congruency) %>%
summarize(meanRT = mean(RT)) %>%
mutate(stroopRT = meanRT[Congruency==2] - meanRT[Congruency==1]) %>%
distinct(imagePair, stroopRT) %>%
mutate(highBasicID=is.element(imagePair, highBasicDisplays)) %>%
group_by(highBasicID) %>%
multi_boot_standard(col = "stroopRT")
# plot3=ggplot(itemByID, aes(x = highBasicID, y = mean, fill=highBasicID)) +
#   theme_few()  +
#   theme(text = element_text(size=18)) +
#   geom_point() +
#   geom_bar(stat = "identity", position= "dodge", alpha=.5) +
#   scale_fill_manual(values=c("#39568CFF", "#B8DE29FF")) +
#   geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),color=c("#39568CFF", "#B8DE29FF")) +
#   labs(y = "Average 4-year-olds' Stroop Display Effect (ms)", x ="") +
#   theme(legend.position="none") +
#   scale_x_discrete(labels=c("Poorly-identified","Well-identified "))  +labs(x = NULL)
E3=ggarrange(plot1,plot2,nrow=1)
ggsave("Figure4-AdultvsKids.tiff", width = 11.5, height = 6,unit =  "in", plot = E3, path="./figures/", device = "tiff",dpi = 300)
ggsave("Figure4-AdultvsKids.png", width = 11.5, height = 6,unit =  "in", plot = E3, path="./figures/", device = "png",dpi = 300)
error_3YearOlds
